// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String               @id @default(uuid())
  userName     String
  email        String               @unique
  password     String
  refreshToken String?
  groups       UserOnGroups[]
  friendships1 Friendship[]         @relation("UserToFriendship1")
  friendships2 Friendship[]         @relation("UserToFriendship2")
  initiator    TransactionEntries[] @relation("TransactionEntryInitiator")
  Tsender      TransactionEntries[] @relation("TransactionEntriesSender")
  Treceiver    TransactionEntries[] @relation("TransactionEntriesReveiver")
}

model Friendship {
  id               String @id @default(uuid())
  sender           String @default("")
  user1            User   @relation("UserToFriendship1", fields: [sender], references: [id])
  receiver         String @default("")
  user2            User   @relation("UserToFriendship2", fields: [receiver], references: [id])
  friendshipStatus String
}

model Group {
  id          String         @id @default(uuid())
  name        String
  users       UserOnGroups[]
  Transaction Transaction[]
}

model UserOnGroups {
  id      String  @id @default(uuid())
  userId  String?
  User    User?   @relation(fields: [userId], references: [id])
  groupId String?
  Group   Group?  @relation(fields: [groupId], references: [id])
}

model Transaction {
  id                 String               @id @default(uuid())
  groupId            String
  Group              Group?               @relation(fields: [groupId], references: [id])
  Description        String?
  TransactionEntries TransactionEntries[]
}

model TransactionEntries {
  id            String      @id @default(uuid())
  transactionId String
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
  initiator     String
  user1         User        @relation("TransactionEntryInitiator", fields: [initiator], references: [id])
  Sender        String
  user2         User        @relation("TransactionEntriesSender", fields: [Sender], references: [id])
  Receiver      String
  user3         User        @relation("TransactionEntriesReveiver", fields: [Receiver], references: [id])
  Amount        Int
}
